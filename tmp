  def _parseMessage(self, msgBody, jid):
    print msgBody
    '''
    Process mathmatical calculations given by breaking it down in a recursive manner.

    Arguments:
      msgBody -- The terms or sets of terms being processed.
      jid -- The jid of the user sending the message to provide for seperate variables.
    '''

    msgBody = msgBody.replace(' ','').replace('\n','')
    try:
      return float(msgBody)
    except ValueError: 
      # Handle variable assignment
      if '=' in msgBody:
        variable, value = msgBody.split('=',1)
        if '=' in value:
          # Raise appropriate syntax error
          raise SyntaxError('Please enter one variable assignment per message')
        if not variable.isalpha():
          # Raise appropriate syntax error
          raise SyntaxError('Variables must be alpha strings')
        # Calculate Value
        value = self._parseMessage(value, jid)
        try:
          self.variables[str(jid)][variable] = value
        except KeyError:
          self.variables[jid] = {}
          self.variables[jid][variable] = value
        if value == None or variable == '':
          raise SyntaxError
        return 'Variable ' + str(variable) + ' set to ' + str(value)

      # Handle parentheses
      if ')' in msgBody: 
        if '(' not in msgBody:
          raise SyntaxError('Unmatched parentheses')
        pClose = msgBody.find(')')
        pOpen = msgBody[:pClose].rfind('(') + 1
        print msgBody[:pOpen-1]  + str(self._parseMessage(msgBody[pOpen:pClose], jid)) + msgBody[pClose+1:]
        return self._parseMessage(msgBody[:pOpen-1]  + str(self._parseMessage(msgBody[pOpen:pClose], jid)) + msgBody[pClose+1:], jid)

      # Make all subtraction adding a negative
      re.sub('[^+]-', '+-', msgBody)

      # Handle addition
      if '+' in msgBody:
        return sum([self._parseMessage(submessage, jid) for submessage in msgBody.split('+') if submessage is not ''])
      
      # Handle division
      if '/' in msgBody:
        terms = [self._parseMessage(submessage, jid) for submessage in msgBody.split('/')]
        answer = terms[0]
        for term in terms[1:]:
          answer /= term
        return answer

      # Handle multiplication
      if '*' in msgBody:
        print "SCARRRYYYY"
        product = 1
        for multiplcand in [self._parseMessage(submessage, jid) for submessage in msgBody.split('*')]:
          product *= multiplcand
        return product
      
      # Handle exponents
      if '^' in msgBody:
        base, exponent = [self._parseMessage(submessage, jid) for submessage in msgBody.split('^')]
        return base**exponent             
      try:
        return self.variables[str(jid)][msgBody]
      except KeyError:
        raise KeyError(msgBody)
